<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animation on Learning w/ Swift</title>
    <link>//coryjpopp.com/tags/animation/</link>
    <description>Recent content in Animation on Learning w/ Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="//coryjpopp.com/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Circular Progress Animation</title>
      <link>//coryjpopp.com/posts/circular-progress-animation/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/circular-progress-animation/</guid>
      <description>This is undoubtably quite a lot of code that can be reduced, but I was happy with my first draft of this circular progress animation that I created in SwiftUI.
TimelineView() appears to be extremely efficient in creating animations that rely on a timer, without any of the inefficiencies of leaving a timer running constantly.
struct CircularProgress: View { var lineWidth: CGFloat = 40 @State var secondsCounter: Double = 0 @State var iconSizer: Bool = false var body: some View { TimelineView(.</description>
    </item>
    
    <item>
      <title>Scrollable Gallaries in SwiftUI</title>
      <link>//coryjpopp.com/posts/scrollable-gallaries-in-swiftui/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/scrollable-gallaries-in-swiftui/</guid>
      <description>TabView in SwiftUI makes creating scrolling galleries a breeze when combined with the optional .tabViewStyle(PageTabViewStyle()) modifier.
In this example I overwrote the default appearance of the page indicators by running a simple function when the view appears so that the indicator dots are visible on a white background.
import SwiftUI struct ImageSlider: View { private let images = [&amp;#34;Barbie&amp;#34;, &amp;#34;Oppenheimer&amp;#34;, &amp;#34;Blue Beetle&amp;#34;, &amp;#34;Haunted Mansion&amp;#34;, &amp;#34;Mission Impossible&amp;#34;] var body: some View { TabView { ForEach(images, id: \.</description>
    </item>
    
    <item>
      <title>Live Updates Animation</title>
      <link>//coryjpopp.com/posts/live-updates-animation/</link>
      <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/live-updates-animation/</guid>
      <description>I came across a simple yet beautiful animation in the New York Times app the other day denoting their live updates feed.
It has three dots, all with different shades of red, alternating to imply to the user that changes to the story are happening rapidly in real time.
I always love challenging myself to get better at animations within SwiftUI, so I set out to recreate this cool little design.</description>
    </item>
    
    <item>
      <title>Adding Transparency to Sheets in SwiftUI</title>
      <link>//coryjpopp.com/posts/adding-transparency-to-sheets-in-swiftui/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/adding-transparency-to-sheets-in-swiftui/</guid>
      <description>Native sheets in iOS are by default opaque, and require a bit of extra code to enable any form of transparency.
First we can create a new background view that conforms to UIViewRepresentable.
struct BackgroundClearView: UIViewRepresentable { func makeUIView(context: Context) -&amp;gt; UIView { let view = UIView() DispatchQueue.main.async { view.superview?.superview?.backgroundColor = .clear } return view } func updateUIView(_ uiView: UIView, context: Context) {} } And then we can use that transparent view as a background view within our sheet to enable transparency.</description>
    </item>
    
  </channel>
</rss>
