<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on Learning w/ Swift</title>
    <link>//coryjpopp.com/tags/swiftui/</link>
    <description>Recent content in SwiftUI on Learning w/ Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="//coryjpopp.com/tags/swiftui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Live Updates Animation</title>
      <link>//coryjpopp.com/posts/live-updates-animation/</link>
      <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/live-updates-animation/</guid>
      <description>I came across a simple yet beautiful animation in the New York Times app the other day denoting their live updates feed.
It has three dots, all with different shades of red, alternating to imply to the user that changes to the story are happening rapidly in real time.
I always love challenging myself to get better at animations within SwiftUI, so I set out to recreate this cool little design.</description>
    </item>
    
    <item>
      <title>Swipe to delete from lists in SwiftUI</title>
      <link>//coryjpopp.com/posts/swipe-to-delete-from-lists-in-swiftui/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/swipe-to-delete-from-lists-in-swiftui/</guid>
      <description>SwiftUI includes a native solution for a swipe to delete function from within lists, which works exactly as you would expect with just a few lines of additional code.
The code itself is simple, and involves us creating a ForEach of our array within our list, and adding a .onDelete modifier to trigger the removeItems function that we have created below our view body.
ðŸ’¡ Itâ€™s important to note that our .</description>
    </item>
    
    <item>
      <title>Adding Transparency to Sheets in SwiftUI</title>
      <link>//coryjpopp.com/posts/adding-transparency-to-sheets-in-swiftui/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//coryjpopp.com/posts/adding-transparency-to-sheets-in-swiftui/</guid>
      <description>Native sheets in iOS are by default opaque, and require a bit of extra code to enable any form of transparency.
First we can create a new background view that conforms to UIViewRepresentable.
struct BackgroundClearView: UIViewRepresentable { func makeUIView(context: Context) -&amp;gt; UIView { let view = UIView() DispatchQueue.main.async { view.superview?.superview?.backgroundColor = .clear } return view } func updateUIView(_ uiView: UIView, context: Context) {} } And then we can use that transparent view as a background view within our sheet to enable transparency.</description>
    </item>
    
  </channel>
</rss>
